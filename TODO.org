* Design considerations (thanks, Discord Quake Remastered!)

 - quake directory structure review: https://www.slipseer.com/index.php?threads/understanding-your-quake-directory-installing-custom-content.174/

 - compilers

   - the majority of developers use FTEQCC, and the dialect that comes with it (see
     https://www.fteqcc.org/dl/fteqcc_manual.txt)

   - majority of modes use Vanilla QuakeC but worth working on dialects as well

   - gmqcc (https://graphitemaster.github.io/gmqcc/) - a compiler that tries to be modern
     in its approaches, has tests, it strict with standards, etc

   - the original qcc: https://github.com/id-Software/Quake-Tools/tree/master/qcc

 - default community tools: editors, vscode with plugins

 - Collection of resources: https://github.com/dumptruckDS/awesome-quake

 - QuakeC code:

   - Quake Rerelease: https://github.com/id-Software/quake-rerelease-qc

   - Arcane Dimensions mod: https://github.com/SimsOCallaghan/ArcaneDimensions

   - 2048 mod: https://github.com/jhspetersson/q2048

   - dev kit: https://developer.vera-visions.com/ (https://github.com/VeraVisions/nuclide)

   - dev kit: progs_dump (https://github.com/progs-dump-dev/progs_dump)

 - maintained engines: FTE, Quakespams, Ironwail, vkquake

   - engine overview: https://www.slipseer.com/index.php?threads/quake-engines-source-ports-a-beginners-guide.11/

* progs.dat format

** Original Quake / qcc progs.data

The binary file format resulting from the QuakeC compiler source code is structured as
follows:

- progs struct: A metadata header (dprograms_t) describing offsets and sizes for various
  data sections. This struct is filled at the end of the process.

- strings: A block of null-terminated strings used in the program.

- statements: A block of dstatement_t structures representing bytecode instructions.

- functions: A block of dfunction_t structures providing information about each function in the program.

- global definitions: A block of ddef_t structures representing global variable definitions.

- field definitions: A block of ddef_t structures representing definitions of entity
  fields.

- globals: A block of global values (4-byte values).

Data types in the file:

- dprograms_t: Metadata about the compiled program, such as version, CRC, and offsets/sizes of the sections.

- ddef_t: Definition of a variable or a field, including type, offset, and string name.

- dstatement_t: An instruction for the Quake virtual machine, containing operation code and operands.

- dfunction_t: Information about a function, including first statement number, parameter details, and string name/file.

All multi-byte values are stored in little-endian format. After writing all sections, the
header is updated with the correct information and written at the beginning of the file.

* Further work and ideas

  - [X] local completion

  - [X] basic syntax highlighting for common language elements

  - [X] imenu support

    - [X] qc style functions

    - [X] global variables

    - [X] fields

    - [X] methods

  - [X] which-func support

  - [-] syntax highlighting

    - [X] comments (both cpp/c style)

    - [X] qc functions names

    - [X] model pragmas

    - [X] builtins

    - [X] variable names

      - [X] global

      - [X] fields

      - [X] formal parameters

      - [X] multiple variable definitions per line

      - [X] methods

      - [X] local definition

      - [X] frame functions

    - [ ] check all literals

  - [-] xref

    - [X] local definitions

    - [ ] wider definition search (grep-like or something?)

  - [-] compilation support for popular compilers

    - [X] FTEQCC

    - [ ] gmqcc

    - [ ] others?

  - [-] Eldoc

    - [X] local definitions

    - [ ] global definition

  - [ ] reuse definition cache between xref and eldoc

  - [ ] customisation options (compiler, etc)

  - [ ] publish a package

  - [ ] linting?

  - [ ] c-style functions? better dialect support?

  - [ ] enforce emacs lisp coding conventions

    - [ ] write a package release checklist

    - [ ] checkdoc

    - [ ] package-lint

    - [ ] emacs lisp conventions for variables and constants?

    - [ ] eval-when-compile for rx

  - [ ] unit testing for code nav, font-lock, syntax, compilation

  - [ ] package tool (cask or something)

  - [ ] global completion

  - [ ] flymake/flycheck?

  - [ ] src file support?
